#!/usr/bin/env python3
from pathlib import Path

package = "views"
controllers_path = Path(".")


for controller_dir in controllers_path.iterdir():
    if not controller_dir.is_dir():
        continue
    views_dir = controller_dir / "views"
    if not views_dir.exists():
        continue

    controller_package = controller_dir.name
    types_file = controller_dir / "types.go"
    if not types_file.exists():
        types_file.write_text(f"package {controller_package}\n\n")

    types_content = types_file.read_text()
    stubs_file = controller_dir / "views.go"
    stubs_content = f"""// Code generated by gen. DO NOT EDIT.
package {controller_package}

import (
	"embed"
	"sync"

	"github.com/reddec/dreaming-bard/internal/server/views"
)

//go:embed all:views
var assets embed.FS

"""
    for view in views_dir.glob("*.gohtml"):
        view_name = "".join(
            x.title() for i, x in enumerate(view.with_suffix("").name.split("_"))
        )

        type_struct_name = view_name[0].lower() + view_name[1:] + "Params"

        if type_struct_name + " " not in types_content:
            with types_file.open("at") as f:
                f.write(f"\n\ntype {type_struct_name} struct {{\n}}\n")

        stubs_content += (
            f"""
var view{view_name} = sync.OnceValue(func() *views.DynamicView[{type_struct_name}] {{
	return views.InheritBase[{type_struct_name}](assets, "views/{view.name}")
}})

""".strip()
            + "\n\n"
        )

        content = view.read_text()
        if not content.startswith("{{/*"):
            content = (
                "{{/* gotype: github.com/reddec/dreaming-bard/internal/server/"
                + f"{controller_package}.{type_struct_name}"
                + " */}}\n"
                + content
            )
            view.write_text(content)
    stubs_file.write_text(stubs_content)
