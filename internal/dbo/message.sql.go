// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: message.sql

package dbo

import (
	"context"

	"github.com/reddec/dreaming-bard/internal/common"
)

const createMessage = `-- name: CreateMessage :one
INSERT INTO message (chat_id, content, role, tool_id, tool_name)
VALUES (?, ?, ?, ?, ?)
RETURNING id, chat_id, created_at, content, role, tool_id, tool_name
`

type CreateMessageParams struct {
	ChatID   int64       `json:"chat_id"`
	Content  string      `json:"content"`
	Role     common.Role `json:"role"`
	ToolID   string      `json:"tool_id"`
	ToolName string      `json:"tool_name"`
}

func (q *Queries) CreateMessage(ctx context.Context, arg CreateMessageParams) (Message, error) {
	row := q.db.QueryRowContext(ctx, createMessage,
		arg.ChatID,
		arg.Content,
		arg.Role,
		arg.ToolID,
		arg.ToolName,
	)
	var i Message
	err := row.Scan(
		&i.ID,
		&i.ChatID,
		&i.CreatedAt,
		&i.Content,
		&i.Role,
		&i.ToolID,
		&i.ToolName,
	)
	return i, err
}

const deleteMessage = `-- name: DeleteMessage :exec
DELETE
FROM message
WHERE id = ?
`

func (q *Queries) DeleteMessage(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteMessage, id)
	return err
}

const getMessage = `-- name: GetMessage :one
SELECT id, chat_id, created_at, content, role, tool_id, tool_name
FROM message
WHERE id = ?
`

func (q *Queries) GetMessage(ctx context.Context, id int64) (Message, error) {
	row := q.db.QueryRowContext(ctx, getMessage, id)
	var i Message
	err := row.Scan(
		&i.ID,
		&i.ChatID,
		&i.CreatedAt,
		&i.Content,
		&i.Role,
		&i.ToolID,
		&i.ToolName,
	)
	return i, err
}

const listMessagesByChat = `-- name: ListMessagesByChat :many
SELECT id, chat_id, created_at, content, role, tool_id, tool_name
FROM message
WHERE chat_id = ?
ORDER BY id
`

func (q *Queries) ListMessagesByChat(ctx context.Context, chatID int64) ([]Message, error) {
	rows, err := q.db.QueryContext(ctx, listMessagesByChat, chatID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Message{}
	for rows.Next() {
		var i Message
		if err := rows.Scan(
			&i.ID,
			&i.ChatID,
			&i.CreatedAt,
			&i.Content,
			&i.Role,
			&i.ToolID,
			&i.ToolName,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateMessageContent = `-- name: UpdateMessageContent :exec
UPDATE message
SET content    = ?
WHERE id = ?
`

type UpdateMessageContentParams struct {
	Content string `json:"content"`
	ID      int64  `json:"id"`
}

func (q *Queries) UpdateMessageContent(ctx context.Context, arg UpdateMessageContentParams) error {
	_, err := q.db.ExecContext(ctx, updateMessageContent, arg.Content, arg.ID)
	return err
}
