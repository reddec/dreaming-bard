// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: role.sql

package dbo

import (
	"context"

	"github.com/reddec/dreaming-bard/internal/common"
)

const createRole = `-- name: CreateRole :one
INSERT INTO role (name, system, model, purpose)
VALUES (?, ?, ?, ?)
RETURNING id, created_at, updated_at, name, system, model, purpose
`

type CreateRoleParams struct {
	Name    string         `json:"name"`
	System  string         `json:"system"`
	Model   string         `json:"model"`
	Purpose common.Purpose `json:"purpose"`
}

func (q *Queries) CreateRole(ctx context.Context, arg CreateRoleParams) (Role, error) {
	row := q.db.QueryRowContext(ctx, createRole,
		arg.Name,
		arg.System,
		arg.Model,
		arg.Purpose,
	)
	var i Role
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		&i.System,
		&i.Model,
		&i.Purpose,
	)
	return i, err
}

const deleteRole = `-- name: DeleteRole :exec
DELETE
FROM role
WHERE id = ?
`

func (q *Queries) DeleteRole(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteRole, id)
	return err
}

const getRole = `-- name: GetRole :one
SELECT id, created_at, updated_at, name, system, model, purpose
FROM role
WHERE id = ?
`

func (q *Queries) GetRole(ctx context.Context, id int64) (Role, error) {
	row := q.db.QueryRowContext(ctx, getRole, id)
	var i Role
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		&i.System,
		&i.Model,
		&i.Purpose,
	)
	return i, err
}

const listRoles = `-- name: ListRoles :many
SELECT id, created_at, updated_at, name, system, model, purpose
FROM role
ORDER BY id
`

func (q *Queries) ListRoles(ctx context.Context) ([]Role, error) {
	rows, err := q.db.QueryContext(ctx, listRoles)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Role{}
	for rows.Next() {
		var i Role
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Name,
			&i.System,
			&i.Model,
			&i.Purpose,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateRole = `-- name: UpdateRole :one
UPDATE role
SET name       = ?,
    system     = ?,
    model      = ?,
    purpose    = ?,
    updated_at = CURRENT_TIMESTAMP
WHERE id = ?
RETURNING id, created_at, updated_at, name, system, model, purpose
`

type UpdateRoleParams struct {
	Name    string         `json:"name"`
	System  string         `json:"system"`
	Model   string         `json:"model"`
	Purpose common.Purpose `json:"purpose"`
	ID      int64          `json:"id"`
}

func (q *Queries) UpdateRole(ctx context.Context, arg UpdateRoleParams) (Role, error) {
	row := q.db.QueryRowContext(ctx, updateRole,
		arg.Name,
		arg.System,
		arg.Model,
		arg.Purpose,
		arg.ID,
	)
	var i Role
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		&i.System,
		&i.Model,
		&i.Purpose,
	)
	return i, err
}
