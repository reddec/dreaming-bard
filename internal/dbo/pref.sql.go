// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: pref.sql

package dbo

import (
	"context"
)

const deletePreference = `-- name: DeletePreference :exec
DELETE
FROM preference
WHERE name = ?
`

func (q *Queries) DeletePreference(ctx context.Context, name string) error {
	_, err := q.db.ExecContext(ctx, deletePreference, name)
	return err
}

const getPreference = `-- name: GetPreference :one
SELECT name, created_at, updated_at, value
FROM preference
WHERE name = ?
`

func (q *Queries) GetPreference(ctx context.Context, name string) (Preference, error) {
	row := q.db.QueryRowContext(ctx, getPreference, name)
	var i Preference
	err := row.Scan(
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Value,
	)
	return i, err
}

const setPreference = `-- name: SetPreference :exec
INSERT INTO preference(name, value)
VALUES (?, ?)
ON CONFLICT DO UPDATE SET value      = EXCLUDED.value,
                          updated_at = CURRENT_TIMESTAMP
`

type SetPreferenceParams struct {
	Name  string `json:"name"`
	Value string `json:"value"`
}

func (q *Queries) SetPreference(ctx context.Context, arg SetPreferenceParams) error {
	_, err := q.db.ExecContext(ctx, setPreference, arg.Name, arg.Value)
	return err
}
