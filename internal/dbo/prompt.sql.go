// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: prompt.sql

package dbo

import (
	"context"
	"time"

	"github.com/reddec/dreaming-bard/internal/common"
)

const createPrompt = `-- name: CreatePrompt :one
INSERT INTO prompt (summary, content, role_id)
VALUES (?, ?, ?)
RETURNING id, created_at, updated_at, summary, content, role_id, pinned_at
`

type CreatePromptParams struct {
	Summary string `json:"summary"`
	Content string `json:"content"`
	RoleID  int64  `json:"role_id"`
}

func (q *Queries) CreatePrompt(ctx context.Context, arg CreatePromptParams) (Prompt, error) {
	row := q.db.QueryRowContext(ctx, createPrompt, arg.Summary, arg.Content, arg.RoleID)
	var i Prompt
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Summary,
		&i.Content,
		&i.RoleID,
		&i.PinnedAt,
	)
	return i, err
}

const deletePrompt = `-- name: DeletePrompt :exec
DELETE
FROM prompt
WHERE id = ?
`

func (q *Queries) DeletePrompt(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deletePrompt, id)
	return err
}

const getPrompt = `-- name: GetPrompt :one
SELECT id, created_at, updated_at, summary, content, role_id, pinned_at
FROM prompt
WHERE id = ?
`

func (q *Queries) GetPrompt(ctx context.Context, id int64) (Prompt, error) {
	row := q.db.QueryRowContext(ctx, getPrompt, id)
	var i Prompt
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Summary,
		&i.Content,
		&i.RoleID,
		&i.PinnedAt,
	)
	return i, err
}

const listPinnedPrompts = `-- name: ListPinnedPrompts :many
SELECT id, created_at, updated_at, summary, content, role_id, pinned_at
FROM prompt
WHERE pinned_at IS NOT NULL
ORDER BY pinned_at
`

func (q *Queries) ListPinnedPrompts(ctx context.Context) ([]Prompt, error) {
	rows, err := q.db.QueryContext(ctx, listPinnedPrompts)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Prompt{}
	for rows.Next() {
		var i Prompt
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Summary,
			&i.Content,
			&i.RoleID,
			&i.PinnedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listPrompts = `-- name: ListPrompts :many
SELECT prompt.id, prompt.created_at, prompt.updated_at, prompt.summary, prompt.content, prompt.role_id, prompt.pinned_at, role_id, role.purpose AS role_purpose, role.name AS role_name
FROM prompt
         INNER JOIN role ON role.id = prompt.role_id
ORDER BY prompt.pinned_at IS NULL, prompt.pinned_at, prompt.id
`

type ListPromptsRow struct {
	Prompt      Prompt         `json:"prompt"`
	RoleID      int64          `json:"role_id"`
	RolePurpose common.Purpose `json:"role_purpose"`
	RoleName    string         `json:"role_name"`
}

func (q *Queries) ListPrompts(ctx context.Context) ([]ListPromptsRow, error) {
	rows, err := q.db.QueryContext(ctx, listPrompts)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListPromptsRow{}
	for rows.Next() {
		var i ListPromptsRow
		if err := rows.Scan(
			&i.Prompt.ID,
			&i.Prompt.CreatedAt,
			&i.Prompt.UpdatedAt,
			&i.Prompt.Summary,
			&i.Prompt.Content,
			&i.Prompt.RoleID,
			&i.Prompt.PinnedAt,
			&i.RoleID,
			&i.RolePurpose,
			&i.RoleName,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updatePrompt = `-- name: UpdatePrompt :exec
UPDATE prompt
SET summary    = ?,
    content    = ?,
    role_id    = ?,
    updated_at = CURRENT_TIMESTAMP
WHERE id = ?
`

type UpdatePromptParams struct {
	Summary string `json:"summary"`
	Content string `json:"content"`
	RoleID  int64  `json:"role_id"`
	ID      int64  `json:"id"`
}

func (q *Queries) UpdatePrompt(ctx context.Context, arg UpdatePromptParams) error {
	_, err := q.db.ExecContext(ctx, updatePrompt,
		arg.Summary,
		arg.Content,
		arg.RoleID,
		arg.ID,
	)
	return err
}

const updatePromptPin = `-- name: UpdatePromptPin :exec
UPDATE prompt
SET pinned_at = ?
WHERE id = ?
`

type UpdatePromptPinParams struct {
	PinnedAt *time.Time `json:"pinned_at"`
	ID       int64      `json:"id"`
}

func (q *Queries) UpdatePromptPin(ctx context.Context, arg UpdatePromptPinParams) error {
	_, err := q.db.ExecContext(ctx, updatePromptPin, arg.PinnedAt, arg.ID)
	return err
}
