// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: chat.sql

package dbo

import (
	"context"
)

const addChatStats = `-- name: AddChatStats :exec
UPDATE chat
SET input_tokens  = input_tokens + ?,
    output_tokens = output_tokens + ?,
    updated_at    = CURRENT_TIMESTAMP
WHERE id = ?
`

type AddChatStatsParams struct {
	InputTokens  int64 `json:"input_tokens"`
	OutputTokens int64 `json:"output_tokens"`
	ID           int64 `json:"id"`
}

func (q *Queries) AddChatStats(ctx context.Context, arg AddChatStatsParams) error {
	_, err := q.db.ExecContext(ctx, addChatStats, arg.InputTokens, arg.OutputTokens, arg.ID)
	return err
}

const createChat = `-- name: CreateChat :one
INSERT INTO chat (role_id, draft, annotation)
VALUES (?, ?, ?)
RETURNING id, created_at, updated_at, input_tokens, output_tokens, draft, role_id, annotation
`

type CreateChatParams struct {
	RoleID     int64  `json:"role_id"`
	Draft      string `json:"draft"`
	Annotation string `json:"annotation"`
}

func (q *Queries) CreateChat(ctx context.Context, arg CreateChatParams) (Chat, error) {
	row := q.db.QueryRowContext(ctx, createChat, arg.RoleID, arg.Draft, arg.Annotation)
	var i Chat
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.InputTokens,
		&i.OutputTokens,
		&i.Draft,
		&i.RoleID,
		&i.Annotation,
	)
	return i, err
}

const deleteChat = `-- name: DeleteChat :exec
DELETE
FROM chat
WHERE id = ?
`

func (q *Queries) DeleteChat(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteChat, id)
	return err
}

const getChat = `-- name: GetChat :one
SELECT id, created_at, updated_at, input_tokens, output_tokens, draft, role_id, annotation
FROM chat
WHERE id = ?
`

func (q *Queries) GetChat(ctx context.Context, id int64) (Chat, error) {
	row := q.db.QueryRowContext(ctx, getChat, id)
	var i Chat
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.InputTokens,
		&i.OutputTokens,
		&i.Draft,
		&i.RoleID,
		&i.Annotation,
	)
	return i, err
}

const listChats = `-- name: ListChats :many
SELECT chat.id, chat.created_at, chat.updated_at, chat.input_tokens, chat.output_tokens, chat.draft, chat.role_id, chat.annotation,
       r.name                                                 AS role_name,
       (SELECT COUNT(*) FROM message WHERE chat_id = chat.id) AS num_messages
FROM chat
         INNER JOIN role r ON chat.role_id = r.id
ORDER BY chat.id DESC
`

type ListChatsRow struct {
	Chat        Chat   `json:"chat"`
	RoleName    string `json:"role_name"`
	NumMessages int64  `json:"num_messages"`
}

func (q *Queries) ListChats(ctx context.Context) ([]ListChatsRow, error) {
	rows, err := q.db.QueryContext(ctx, listChats)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListChatsRow{}
	for rows.Next() {
		var i ListChatsRow
		if err := rows.Scan(
			&i.Chat.ID,
			&i.Chat.CreatedAt,
			&i.Chat.UpdatedAt,
			&i.Chat.InputTokens,
			&i.Chat.OutputTokens,
			&i.Chat.Draft,
			&i.Chat.RoleID,
			&i.Chat.Annotation,
			&i.RoleName,
			&i.NumMessages,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listLastChats = `-- name: ListLastChats :many
SELECT id, created_at, updated_at, input_tokens, output_tokens, draft, role_id, annotation
FROM chat
ORDER BY id DESC
LIMIT ?
`

func (q *Queries) ListLastChats(ctx context.Context, limit int64) ([]Chat, error) {
	rows, err := q.db.QueryContext(ctx, listLastChats, limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Chat{}
	for rows.Next() {
		var i Chat
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.InputTokens,
			&i.OutputTokens,
			&i.Draft,
			&i.RoleID,
			&i.Annotation,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateChatDraft = `-- name: UpdateChatDraft :exec
UPDATE chat
SET draft      = ?,
    updated_at = CURRENT_TIMESTAMP
WHERE id = ?
`

type UpdateChatDraftParams struct {
	Draft string `json:"draft"`
	ID    int64  `json:"id"`
}

func (q *Queries) UpdateChatDraft(ctx context.Context, arg UpdateChatDraftParams) error {
	_, err := q.db.ExecContext(ctx, updateChatDraft, arg.Draft, arg.ID)
	return err
}
