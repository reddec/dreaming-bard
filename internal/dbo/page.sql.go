// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: page.sql

package dbo

import (
	"context"
	"strings"
)

const createPage = `-- name: CreatePage :one
INSERT INTO page (summary, content, num)
VALUES (?, ?, (SELECT COALESCE(MAX(num), 0) + 1 FROM page))
RETURNING id, created_at, updated_at, summary, content, num
`

type CreatePageParams struct {
	Summary string `json:"summary"`
	Content string `json:"content"`
}

func (q *Queries) CreatePage(ctx context.Context, arg CreatePageParams) (Page, error) {
	row := q.db.QueryRowContext(ctx, createPage, arg.Summary, arg.Content)
	var i Page
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Summary,
		&i.Content,
		&i.Num,
	)
	return i, err
}

const getPage = `-- name: GetPage :one
SELECT id, created_at, updated_at, summary, content, num
FROM page
WHERE id = ?
`

func (q *Queries) GetPage(ctx context.Context, id int64) (Page, error) {
	row := q.db.QueryRowContext(ctx, getPage, id)
	var i Page
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Summary,
		&i.Content,
		&i.Num,
	)
	return i, err
}

const getPageByNum = `-- name: GetPageByNum :one
SELECT id, created_at, updated_at, summary, content, num
FROM page
WHERE num = ?
LIMIT 1
`

func (q *Queries) GetPageByNum(ctx context.Context, num int64) (Page, error) {
	row := q.db.QueryRowContext(ctx, getPageByNum, num)
	var i Page
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Summary,
		&i.Content,
		&i.Num,
	)
	return i, err
}

const getPageNum = `-- name: GetPageNum :one
SELECT num
FROM page
WHERE id = ?
`

func (q *Queries) GetPageNum(ctx context.Context, id int64) (int64, error) {
	row := q.db.QueryRowContext(ctx, getPageNum, id)
	var num int64
	err := row.Scan(&num)
	return num, err
}

const listLastPages = `-- name: ListLastPages :many
SELECT id, created_at, updated_at, summary, content, num
FROM page
ORDER BY num DESC
LIMIT ?
`

func (q *Queries) ListLastPages(ctx context.Context, limit int64) ([]Page, error) {
	rows, err := q.db.QueryContext(ctx, listLastPages, limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Page{}
	for rows.Next() {
		var i Page
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Summary,
			&i.Content,
			&i.Num,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listPages = `-- name: ListPages :many
SELECT id, created_at, updated_at, summary, content, num
FROM page
ORDER BY num
`

func (q *Queries) ListPages(ctx context.Context) ([]Page, error) {
	rows, err := q.db.QueryContext(ctx, listPages)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Page{}
	for rows.Next() {
		var i Page
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Summary,
			&i.Content,
			&i.Num,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listPagesByIDs = `-- name: ListPagesByIDs :many
SELECT id, created_at, updated_at, summary, content, num
FROM page
WHERE id IN (/*SLICE:ids*/?)
ORDER BY num
`

func (q *Queries) ListPagesByIDs(ctx context.Context, ids []int64) ([]Page, error) {
	query := listPagesByIDs
	var queryParams []interface{}
	if len(ids) > 0 {
		for _, v := range ids {
			queryParams = append(queryParams, v)
		}
		query = strings.Replace(query, "/*SLICE:ids*/?", strings.Repeat(",?", len(ids))[1:], 1)
	} else {
		query = strings.Replace(query, "/*SLICE:ids*/?", "NULL", 1)
	}
	rows, err := q.db.QueryContext(ctx, query, queryParams...)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Page{}
	for rows.Next() {
		var i Page
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Summary,
			&i.Content,
			&i.Num,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listPagesIDs = `-- name: ListPagesIDs :many
SELECT id
FROM page
ORDER BY num
`

func (q *Queries) ListPagesIDs(ctx context.Context) ([]int64, error) {
	rows, err := q.db.QueryContext(ctx, listPagesIDs)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []int64{}
	for rows.Next() {
		var id int64
		if err := rows.Scan(&id); err != nil {
			return nil, err
		}
		items = append(items, id)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updatePage = `-- name: UpdatePage :exec
UPDATE page
SET summary    = ?,
    content    = ?,
    updated_at = CURRENT_TIMESTAMP
WHERE id = ?
`

type UpdatePageParams struct {
	Summary string `json:"summary"`
	Content string `json:"content"`
	ID      int64  `json:"id"`
}

func (q *Queries) UpdatePage(ctx context.Context, arg UpdatePageParams) error {
	_, err := q.db.ExecContext(ctx, updatePage, arg.Summary, arg.Content, arg.ID)
	return err
}

const updatePageSummary = `-- name: UpdatePageSummary :exec
UPDATE page
SET summary    = ?,
    updated_at = CURRENT_TIMESTAMP
WHERE id = ?
`

type UpdatePageSummaryParams struct {
	Summary string `json:"summary"`
	ID      int64  `json:"id"`
}

func (q *Queries) UpdatePageSummary(ctx context.Context, arg UpdatePageSummaryParams) error {
	_, err := q.db.ExecContext(ctx, updatePageSummary, arg.Summary, arg.ID)
	return err
}

const compressPagesSequence = `-- name: compressPagesSequence :exec
UPDATE page
SET num = (SELECT rn
           FROM (SELECT id,
                        ROW_NUMBER() OVER (ORDER BY num, id) AS rn
                 FROM page) AS seq
           WHERE seq.id = page.id)
`

func (q *Queries) compressPagesSequence(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, compressPagesSequence)
	return err
}

const deletePage = `-- name: deletePage :exec
DELETE
FROM page
WHERE id = ?
`

func (q *Queries) deletePage(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deletePage, id)
	return err
}

const movePages = `-- name: movePages :exec
UPDATE page
SET num = num + (CASE WHEN num >= ? THEN 1 ELSE 0 END)
`

func (q *Queries) movePages(ctx context.Context, num int64) error {
	_, err := q.db.ExecContext(ctx, movePages, num)
	return err
}

const setPageNum = `-- name: setPageNum :exec

UPDATE page
SET num = ?
WHERE id = ?
`

type setPageNumParams struct {
	Num int64 `json:"num"`
	ID  int64 `json:"id"`
}

// all this ugly thing because of limitations of SQLc
func (q *Queries) setPageNum(ctx context.Context, arg setPageNumParams) error {
	_, err := q.db.ExecContext(ctx, setPageNum, arg.Num, arg.ID)
	return err
}
