// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: session.sql

package dbo

import (
	"context"
	"time"
)

const deleteSession = `-- name: DeleteSession :exec
DELETE
FROM session
WHERE token = ?
`

func (q *Queries) DeleteSession(ctx context.Context, token string) error {
	_, err := q.db.ExecContext(ctx, deleteSession, token)
	return err
}

const deleteSessionExpired = `-- name: DeleteSessionExpired :exec
DELETE
FROM session
WHERE expires_at < CURRENT_TIMESTAMP
`

func (q *Queries) DeleteSessionExpired(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, deleteSessionExpired)
	return err
}

const findSession = `-- name: FindSession :one
SELECT token, content, expires_at
FROM session
WHERE token = ?
`

func (q *Queries) FindSession(ctx context.Context, token string) (Session, error) {
	row := q.db.QueryRowContext(ctx, findSession, token)
	var i Session
	err := row.Scan(&i.Token, &i.Content, &i.ExpiresAt)
	return i, err
}

const setSession = `-- name: SetSession :exec
INSERT INTO session (token, content, expires_at)
VALUES (?, ?, ?)
ON CONFLICT DO UPDATE SET content    = excluded.content,
                          expires_at = excluded.expires_at
`

type SetSessionParams struct {
	Token     string    `json:"token"`
	Content   []byte    `json:"content"`
	ExpiresAt time.Time `json:"expires_at"`
}

func (q *Queries) SetSession(ctx context.Context, arg SetSessionParams) error {
	_, err := q.db.ExecContext(ctx, setSession, arg.Token, arg.Content, arg.ExpiresAt)
	return err
}
