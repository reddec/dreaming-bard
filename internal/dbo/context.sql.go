// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: context.sql

package dbo

import (
	"context"
	"strings"
)

const createContext = `-- name: CreateContext :one
INSERT INTO context (title, category, content)
VALUES (?, ?, ?)
RETURNING id, created_at, updated_at, title, category, content, archived
`

type CreateContextParams struct {
	Title    string `json:"title"`
	Category string `json:"category"`
	Content  string `json:"content"`
}

func (q *Queries) CreateContext(ctx context.Context, arg CreateContextParams) (Context, error) {
	row := q.db.QueryRowContext(ctx, createContext, arg.Title, arg.Category, arg.Content)
	var i Context
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Title,
		&i.Category,
		&i.Content,
		&i.Archived,
	)
	return i, err
}

const deleteContext = `-- name: DeleteContext :exec
DELETE
FROM context
WHERE id = ?
`

func (q *Queries) DeleteContext(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteContext, id)
	return err
}

const getContext = `-- name: GetContext :one
SELECT id, created_at, updated_at, title, category, content, archived
FROM context
WHERE id = ?
`

func (q *Queries) GetContext(ctx context.Context, id int64) (Context, error) {
	row := q.db.QueryRowContext(ctx, getContext, id)
	var i Context
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Title,
		&i.Category,
		&i.Content,
		&i.Archived,
	)
	return i, err
}

const listContextCategories = `-- name: ListContextCategories :many
SELECT DISTINCT category
FROM context
`

func (q *Queries) ListContextCategories(ctx context.Context) ([]string, error) {
	rows, err := q.db.QueryContext(ctx, listContextCategories)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []string{}
	for rows.Next() {
		var category string
		if err := rows.Scan(&category); err != nil {
			return nil, err
		}
		items = append(items, category)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listContexts = `-- name: ListContexts :many
SELECT id, created_at, updated_at, title, category, content, archived
FROM context
ORDER BY id
`

func (q *Queries) ListContexts(ctx context.Context) ([]Context, error) {
	rows, err := q.db.QueryContext(ctx, listContexts)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Context{}
	for rows.Next() {
		var i Context
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Title,
			&i.Category,
			&i.Content,
			&i.Archived,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listContextsByCategory = `-- name: ListContextsByCategory :many
SELECT id, created_at, updated_at, title, category, content, archived
FROM context
WHERE category = ?
ORDER BY id
`

func (q *Queries) ListContextsByCategory(ctx context.Context, category string) ([]Context, error) {
	rows, err := q.db.QueryContext(ctx, listContextsByCategory, category)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Context{}
	for rows.Next() {
		var i Context
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Title,
			&i.Category,
			&i.Content,
			&i.Archived,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listContextsByIDs = `-- name: ListContextsByIDs :many
SELECT id, created_at, updated_at, title, category, content, archived
FROM context
WHERE id IN (/*SLICE:ids*/?)
`

func (q *Queries) ListContextsByIDs(ctx context.Context, ids []int64) ([]Context, error) {
	query := listContextsByIDs
	var queryParams []interface{}
	if len(ids) > 0 {
		for _, v := range ids {
			queryParams = append(queryParams, v)
		}
		query = strings.Replace(query, "/*SLICE:ids*/?", strings.Repeat(",?", len(ids))[1:], 1)
	} else {
		query = strings.Replace(query, "/*SLICE:ids*/?", "NULL", 1)
	}
	rows, err := q.db.QueryContext(ctx, query, queryParams...)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Context{}
	for rows.Next() {
		var i Context
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Title,
			&i.Category,
			&i.Content,
			&i.Archived,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateContext = `-- name: UpdateContext :exec
UPDATE context
SET title      = ?,
    category   = ?,
    content    = ?,
    updated_at = CURRENT_TIMESTAMP
WHERE id = ?
`

type UpdateContextParams struct {
	Title    string `json:"title"`
	Category string `json:"category"`
	Content  string `json:"content"`
	ID       int64  `json:"id"`
}

func (q *Queries) UpdateContext(ctx context.Context, arg UpdateContextParams) error {
	_, err := q.db.ExecContext(ctx, updateContext,
		arg.Title,
		arg.Category,
		arg.Content,
		arg.ID,
	)
	return err
}

const updateContextArchivedStatus = `-- name: UpdateContextArchivedStatus :exec
UPDATE context
SET archived = ?
WHERE id = ?
`

type UpdateContextArchivedStatusParams struct {
	Archived bool  `json:"archived"`
	ID       int64 `json:"id"`
}

func (q *Queries) UpdateContextArchivedStatus(ctx context.Context, arg UpdateContextArchivedStatusParams) error {
	_, err := q.db.ExecContext(ctx, updateContextArchivedStatus, arg.Archived, arg.ID)
	return err
}
